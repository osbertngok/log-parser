// go generate ./...
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package {{ toLower .ClassName }}
import (
    "bytes"
    "encoding/json"
    "errors"
    "fmt"
    "github.com/osbertngok/log-parser/parsergen"
    "github.com/osbertngok/log-parser/models/common"
    "io"
    "strconv"
    "strings"
    "reflect"
    "time"
)

{{ .RecordClass }}

func (r *{{ .ClassName }}) MarkBitmap(index uint64) {
	quotient := index / 64 // integer division, decimals are truncated
	remainder := index % 64
	switch quotient {
	case 0:
		r.Bitmap0 |= 1 << remainder
	case 1:
		r.Bitmap1 |= 1 << remainder
	case 2:
		r.Bitmap2 |= 1 << remainder
	case 3:
		r.Bitmap3 |= 1 << remainder
	case 4:
		r.Bitmap4 |= 1 << remainder
	case 5:
		r.Bitmap5 |= 1 << remainder
	case 6:
		r.Bitmap6 |= 1 << remainder
	case 7:
		r.Bitmap7 |= 1 << remainder
	case 8:
		r.Bitmap8 |= 1 << remainder
	case 9:
		r.Bitmap9 |= 1 << remainder
	}
}

func (r *{{ .ClassName }}) ToCSV() string {
    var buffer bytes.Buffer

    buffer.WriteString(fmt.Sprintf("\"%s\",", r.EventDate.Format("2006-01-02")))
    buffer.WriteString(fmt.Sprintf("\"%s\",", r.EventTime.Format("2006-01-02 15:04:05")))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatInt(r.Microsecond, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatInt(r.ControllerNo, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap0, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap1, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap2, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap3, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap4, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap5, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap6, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap7, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap8, 10)))
    buffer.WriteString(fmt.Sprintf("%s,", strconv.FormatUint(r.Bitmap9, 10)))

    {{ range .Table.Data }}
        // {{ .Index }}
        {{ if eq .ValueType "float64" }}
            common.HandleFloat64(&buffer, r{{ keyChainsToGoFields .KeyChains }})
        {{ end }}
        {{ if eq .ValueType "string" }}
            common.HandleString(&buffer, r{{ keyChainsToGoFields .KeyChains }})
        {{ end }}
        {{ if eq .ValueType "bool" }}
            common.HandleBool(&buffer, r{{ keyChainsToGoFields .KeyChains }})
        {{ end }}
        {{ if eq .ValueType "array" }}
            common.MuteAsString(&buffer)
        {{ end }}
        {{ if eq .ValueType "mixed" }}
            common.HandleString(&buffer, r{{ keyChainsToGoFields .KeyChains }})
        {{ end }}
    {{ end }}

    ret := buffer.String()

    return ret[:len(ret)-1]
}

const RFC3339Micro = "2006-01-02T15:04:05.000000-0700"

func New{{ .ClassName }}() *{{ .ClassName }} {
	return &{{ .ClassName }}{}
}


func subParseString(f interface{}, keyChains []string, r *{{ .ClassName }}, rv reflect.Value) error {
	m := f.(map[string]interface{})
	if m == nil {
		return errors.New("not an object")
	}
	pv := reflect.Indirect(rv)
	if pv.Kind() != reflect.Struct {
		return fmt.Errorf("%v is not a struct", keyChains)
	}
	for k, v := range m {
		field := pv.FieldByName(parsergen.GetGoFieldName(k))
		structField, ok := pv.Type().FieldByName(parsergen.GetGoFieldName(k))
		if !ok {
			return fmt.Errorf("field %s not found", k)
		}
		if field.IsValid() {
			switch v.(type) {
			case string:
				if field.Type().String() == "string" {
					field.SetString(v.(string))
					intStr := structField.Tag.Get("index")
					index, err := strconv.ParseInt(intStr, 10, 64)
					if err == nil && index >= 0 {
						r.MarkBitmap(uint64(index))
					}
				} else {
					fmt.Printf("%s, type mismatch", field.Type().String())
					// handle mismatch field
				}
			case float64:
				if field.Type().String() == "float64" {
					field.SetFloat(v.(float64))
					intStr := structField.Tag.Get("index")
					index, err := strconv.ParseInt(intStr, 10, 64)
					if err == nil && index >= 0  {
						r.MarkBitmap(uint64(index))
					}
				} else {
					fmt.Printf("%s, type mismatch", field.Type().String())
					// handle mismatch field
				}
			case bool:
				if field.Type().String() == "bool" {
					field.SetBool(v.(bool))
					intStr := structField.Tag.Get("index")
					index, err := strconv.ParseInt(intStr, 10, 64)
					if err == nil && index >= 0  {
						r.MarkBitmap(uint64(index))
					}
				} else {
					fmt.Printf("%s, type mismatch", field.Type().String())
					// handle mismatch field
				}
			case []interface{}:
				if field.Type().String() == "string" {
					field.SetString(fmt.Sprintf("%v", v))
					intStr := structField.Tag.Get("index")
					index, err := strconv.ParseInt(intStr, 10, 64)
					if err == nil && index >= 0  {
						r.MarkBitmap(uint64(index))
					}
				} else {
					fmt.Printf("%s, type mismatch", field.Type().String())
					// handle mismatch field
				}
			case map[string]interface{}:
				if field.CanAddr() {
					subParseString(v, append(keyChains, k), r, reflect.ValueOf(field.Addr().Interface()))
				} else {
					return fmt.Errorf("Cannot Addr for key %s", k)
				}
			case nil:
				fmt.Printf("nil for %s\n", k)

			default:
				fmt.Printf("unknown type: %T", v)
				// handle unknown field
			}
		} else {
			// handle unknown field
		}
	}
	return nil
}

func ParseString(log string, controllerNo int64, tz string) (*{{ .ClassName }}, error) {
	ret := New{{ .ClassName }}()

	loc, err := time.LoadLocation(tz)
	if err != nil {
		return nil, err
	}

	// Remove timestamp
	i := strings.Index(log, ",")
	if i == -1 {
		return nil, fmt.Errorf("%s does not contain comma", log)
	}
	JSONstr := log[i+1:]
	var f interface{}
	err = json.Unmarshal([]byte(JSONstr), &f)
	if err != nil {
		return nil, err
	}
	m := f.(map[string]interface{})
	subParseString(m, []string{}, ret, reflect.ValueOf(ret))
	if err != nil {
		return nil, err
	}
	ret.ControllerNo = controllerNo
	timestampString := log[:i]
	timestamp, err := time.Parse(RFC3339Micro, timestampString)
	if err != nil {
		return nil, err
	}
	eventDateString := log[:10]
	eventDate, err := time.ParseInLocation("2006-01-02", eventDateString, loc)
	if err != nil {
		return nil, err
	}
	ret.EventDate = eventDate
	ret.Microsecond = int64(timestamp.Nanosecond()) / 1000
	ret.EventTime = timestamp.Add(time.Duration(-1*timestamp.Nanosecond()) * time.Nanosecond)
	return ret, nil
}

func FromReader(rd io.Reader, controllerNo int64, tz string) []*{{ .ClassName }} {
	var ret = make([]*{{ .ClassName }}, 0)
	data := make(chan string, 1000)

	go common.HandleInputStream(rd, data)

	for log := range data {
		if log != "" {
			newRecord, err := ParseString(log, controllerNo, tz)
			if err != nil {
				fmt.Printf("%s, %v\n", log, err)
				continue
			}
			ret = append(ret, newRecord)
		}
	}
	return ret
}

